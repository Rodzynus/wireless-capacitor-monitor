tArgs = { ... }
local modemSide = tArgs[1]
local monSide = tArgs[2]
rednet.open(modemSide)
local mon = peripheral.wrap(monSide)
local sizeX, sizeY = mon.getSize()
local cells = {}

local function clearLines(cStart, cEnd)
	for i = cStart, cEnd do
		mon.setCursorPos(1, i)
		mon.clearLine()
	end
	mon.setCursorPos(1, cStart)
end

local function findCell(id)
	for k, v in pairs(cells) do
		if v["id"] == tostring(id) then
			return k
		end
	end
	return nil
end

local function printCellInfo(tab, name, startPos)
	clearLines(startPos, startPos+4)
	mon.setCursorPos(math.floor((sizeX-#name)/2) ,startPos)
	mon.write(name)
	
	mon.setCursorPos(1, startPos+1)
	mon.write("Przechowuje:")
	mon.setCursorPos(sizeX-10, startPos+1)
	mon.write(tab[1])
	
	mon.setCursorPos(1, startPos+2)
	mon.write("Pojemnosc:")
	mon.setCursorPos(sizeX-10, startPos+2)
	mon.write(tab[2])
	
	mon.setCursorPos(1, startPos+3)
	mon.write("Wypelnienie:")
	mon.setCursorPos(sizeX-10, startPos+3)
	mon.write(tab[3])
	
	mon.setCursorPos(1, startPos+4)
	mon.write("Zmiany energii:")
	mon.setCursorPos(sizeX-10, startPos+4)
	mon.write(tab[4])
	
	mon.setCursorPos(1, startPos+4)
end

mon.clear()
while true do
	local _, id, message = os.pullEvent("rednet_message")
	local cellID = findCell(id)
	local msg
		if cellID then
			cells[cellID] = textutils.unserialize(message)
		else
			cells[#cells+1] = textutils.unserialize(message)
			cellID = #cells
		end
	if id == 17 then msg = "BATERIA GLOWNA"
	elseif id == 35 then msg = "BATERIA POMOCNICZA ME"
	elseif id == 34 then msg = "BATERIA DO GENETYKI"
	elseif id == 36 then msg = "BATERIA PRZETWORSTWA"
	else message = "BATERIA"
	end
	printCellInfo(cells[cellID], msg, (cellID-1)*6+1)
end
