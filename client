local tArgs = { ... }

local readDelay = 5
local assertMsg = "Wrong argument, type name of the program without any arguments to see usage."

-- from sam_lie
-- Compatible with Lua 5.0 and 5.1.
-- Disclaimer : use at own risk especially for hedge fund reports :-)

---============================================================
-- add comma to separate thousands
-- 
local function comma_value(amount)
  local formatted = amount
  while true do  
    formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1.%2')
    if (k==0) then
      break
    end
  end
  return formatted
end

---============================================================
-- rounds a number to the nearest decimal places
--
local function round(val, decimal)
  if (decimal) then
    return math.floor( (val * 10^decimal) + 0.5) / (10^decimal)
  else
    return math.floor(val+0.5)
  end
end

--===================================================================
-- given a numeric value formats output with comma to separate thousands
-- and rounded to given decimal places
--
--
local function format_num(amount, decimal, prefix, neg_prefix)
  local str_amount,  formatted, famount, remain

  decimal = decimal or 2  -- default 2 decimal places
  neg_prefix = neg_prefix or "-" -- default negative sign

  famount = math.abs(round(amount,decimal))
  famount = math.floor(famount)

  remain = round(math.abs(amount) - famount, decimal)

        -- comma to separate the thousands
  formatted = comma_value(famount)

        -- attach the decimal portion
  if (decimal > 0) then
    remain = string.sub(tostring(remain),3)
    formatted = formatted .. "." .. remain ..
                string.rep("0", decimal - string.len(remain))
  end

        -- attach prefix string e.g '$' 
  formatted = (prefix or "") .. formatted 

        -- if value is negative then format accordingly
  if (amount<0) then
    if (neg_prefix=="()") then
      formatted = "("..formatted ..")"
    else
      formatted = neg_prefix .. formatted 
    end
  end

  return formatted
end

local function main()
	local receiverID = assert(tonumber(tArgs[1]), assertMsg)
	local modemSide = assert(tArgs[2], assertMsg)
	local batSide = assert(tArgs[3], assertMsg)
	local id = os.getComputerID()
	local batName = os.getComputerLabel()
	
	rednet.open(modemSide)
	local bat = peripheral.wrap(batSide)
	energyStored = bat.getEnergyStored()
	
	timer1 = os.startTimer(readDelay)
	while true do
		os.pullEvent("timer")
		local cell = {}
		local lastEnergyStatus = energyStored
		energyStored = bat.getEnergyStored()
		local maxEnergyStored = bat.getMaxEnergyStored()
		local energyInPercent = (energyStored/maxEnergyStored)*100
		local energyDifference = energyStored - lastEnergyStatus
		
		cell[1] = tostring(format_num(math.floor(energyStored), 0)) .. " MJ"
		cell[2] = tostring(format_num(math.floor(maxEnergyStored), 0)) .. " MJ"
		cell[3] = tostring(math.floor(energyInPercent)) .. "%"
		if energyDifference >= 0 then
			cell[4] = tostring(math.abs(math.floor(energyDifference/100))) .. " MJ/t zysku"
		else
			cell[4] = tostring(math.abs(math.floor(energyDifference/100))) .. " MJ/t straty"
		end
		cell["name"] = batName
		cell["id"] = tostring(id)
		
		rednet.send(receiverID, textutils.serialize(cell))
		timer1 = os.startTimer(readDelay)
	end
end

local function printUsage()
	print("Usage: client <receiver ID> <modem side> <battery side>")
end

if tArgs[1] == nil then
	printUsage()
else
	main()
end
